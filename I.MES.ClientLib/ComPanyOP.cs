//------------------------------------------------------------------------------
// <auto-generated>
//    MES团队制作，不得以任何原因手动变更当前文档
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using I.MES.ClientCore;
using I.MES.GlobalCore;
using I.MES.Tools;
namespace I.MES.Library
{
        public class ComPanyOP
        {
            private string Name = "I.MES.Library.ComPanyOP, I.MES.ServerLib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null";
            public System.Collections.Generic.List<I.MES.Models.SYS_Company> GetList()
            {
                using (IChannel __channel = ChannelFactory.GetChannel())
                {
                    __channel.Open();
    
                    Compiler __compiler = new Compiler();
                    List<Parameters> __ps = new List<Parameters>();
                    
                    BaseInformation_I __info = new BaseInformation_I()
                    {
                        ClassName = this.Name,
                        FunctionName = "GetList",
                        Parameters = __ps
                    };
    
                    ICombinator __combinator = new I.MES.GlobalCore.Combinator.CSCombinator();
    
                    var __rtn = __channel.Send(__compiler.Compile(__combinator.Combination(__info)));
    
                    BaseInfomation_O __outInfo = new Resolver<BaseInfomation_O>().Resolve(__rtn);
    
                    if (__outInfo.Error == null)
                    {
                        
                        if (__outInfo.result == null)
                        {
                            return default(System.Collections.Generic.List<I.MES.Models.SYS_Company>);
                        }
                        return (System.Collections.Generic.List<I.MES.Models.SYS_Company>)(new Resolver(typeof(System.Collections.Generic.List<I.MES.Models.SYS_Company>)).Resolve(__outInfo.result)); 
                    }
                    else
                    {
                        throw new MESException(__outInfo.ErrorCode, new Exception(__outInfo.Error));
                    }
                }
            }
            public System.Collections.Generic.List<I.MES.Models.SYS_Company> GetList( System.String txtSearch, System.Int32 PageNumber, System.Int32 PageSize,out System.Int32 total)
            {
                using (IChannel __channel = ChannelFactory.GetChannel())
                {
                    __channel.Open();
    
                    Compiler __compiler = new Compiler();
                    List<Parameters> __ps = new List<Parameters>();
                    
                    __ps.Add(new Parameters(){Name = "txtSearch", Value = __compiler.Compile(txtSearch),TypeName = "System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",IsRef=false });
                    __ps.Add(new Parameters(){Name = "PageNumber", Value = __compiler.Compile(PageNumber),TypeName = "System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",IsRef=false });
                    __ps.Add(new Parameters(){Name = "PageSize", Value = __compiler.Compile(PageSize),TypeName = "System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",IsRef=false });
                    __ps.Add(new Parameters(){Name = "total", Value = default(System.Int32),TypeName = "System.Int32&, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",IsOut=true });
                    BaseInformation_I __info = new BaseInformation_I()
                    {
                        ClassName = this.Name,
                        FunctionName = "GetList",
                        Parameters = __ps
                    };
    
                    ICombinator __combinator = new I.MES.GlobalCore.Combinator.CSCombinator();
    
                    var __rtn = __channel.Send(__compiler.Compile(__combinator.Combination(__info)));
    
                    BaseInfomation_O __outInfo = new Resolver<BaseInfomation_O>().Resolve(__rtn);
    
                    if (__outInfo.Error == null)
                    {
                        total = new Resolver<System.Int32>().Resolve(__outInfo.Parameters.Find(p => p.Name == "total").Value);
    
                        if (__outInfo.result == null)
                        {
                            return default(System.Collections.Generic.List<I.MES.Models.SYS_Company>);
                        }
                        return (System.Collections.Generic.List<I.MES.Models.SYS_Company>)(new Resolver(typeof(System.Collections.Generic.List<I.MES.Models.SYS_Company>)).Resolve(__outInfo.result)); 
                    }
                    else
                    {
                        throw new MESException(__outInfo.ErrorCode, new Exception(__outInfo.Error));
                    }
                }
            }
            public System.Int32 Update( System.Int32 id, System.String CompanyName, System.String CompanyFullName)
            {
                using (IChannel __channel = ChannelFactory.GetChannel())
                {
                    __channel.Open();
    
                    Compiler __compiler = new Compiler();
                    List<Parameters> __ps = new List<Parameters>();
                    
                    __ps.Add(new Parameters(){Name = "id", Value = __compiler.Compile(id),TypeName = "System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",IsRef=false });
                    __ps.Add(new Parameters(){Name = "CompanyName", Value = __compiler.Compile(CompanyName),TypeName = "System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",IsRef=false });
                    __ps.Add(new Parameters(){Name = "CompanyFullName", Value = __compiler.Compile(CompanyFullName),TypeName = "System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",IsRef=false });
                    BaseInformation_I __info = new BaseInformation_I()
                    {
                        ClassName = this.Name,
                        FunctionName = "Update",
                        Parameters = __ps
                    };
    
                    ICombinator __combinator = new I.MES.GlobalCore.Combinator.CSCombinator();
    
                    var __rtn = __channel.Send(__compiler.Compile(__combinator.Combination(__info)));
    
                    BaseInfomation_O __outInfo = new Resolver<BaseInfomation_O>().Resolve(__rtn);
    
                    if (__outInfo.Error == null)
                    {
                        
                        if (__outInfo.result == null)
                        {
                            return default(System.Int32);
                        }
                        return (System.Int32)(new Resolver(typeof(System.Int32)).Resolve(__outInfo.result)); 
                    }
                    else
                    {
                        throw new MESException(__outInfo.ErrorCode, new Exception(__outInfo.Error));
                    }
                }
            }
            public System.Collections.Generic.List<I.MES.Models.SYS_Company> GetCompanyList()
            {
                using (IChannel __channel = ChannelFactory.GetChannel())
                {
                    __channel.Open();
    
                    Compiler __compiler = new Compiler();
                    List<Parameters> __ps = new List<Parameters>();
                    
                    BaseInformation_I __info = new BaseInformation_I()
                    {
                        ClassName = this.Name,
                        FunctionName = "GetCompanyList",
                        Parameters = __ps
                    };
    
                    ICombinator __combinator = new I.MES.GlobalCore.Combinator.CSCombinator();
    
                    var __rtn = __channel.Send(__compiler.Compile(__combinator.Combination(__info)));
    
                    BaseInfomation_O __outInfo = new Resolver<BaseInfomation_O>().Resolve(__rtn);
    
                    if (__outInfo.Error == null)
                    {
                        
                        if (__outInfo.result == null)
                        {
                            return default(System.Collections.Generic.List<I.MES.Models.SYS_Company>);
                        }
                        return (System.Collections.Generic.List<I.MES.Models.SYS_Company>)(new Resolver(typeof(System.Collections.Generic.List<I.MES.Models.SYS_Company>)).Resolve(__outInfo.result)); 
                    }
                    else
                    {
                        throw new MESException(__outInfo.ErrorCode, new Exception(__outInfo.Error));
                    }
                }
            }
            public I.MES.Models.SYS_Company GetCompany( System.String CompanyCode)
            {
                using (IChannel __channel = ChannelFactory.GetChannel())
                {
                    __channel.Open();
    
                    Compiler __compiler = new Compiler();
                    List<Parameters> __ps = new List<Parameters>();
                    
                    __ps.Add(new Parameters(){Name = "CompanyCode", Value = __compiler.Compile(CompanyCode),TypeName = "System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",IsRef=false });
                    BaseInformation_I __info = new BaseInformation_I()
                    {
                        ClassName = this.Name,
                        FunctionName = "GetCompany",
                        Parameters = __ps
                    };
    
                    ICombinator __combinator = new I.MES.GlobalCore.Combinator.CSCombinator();
    
                    var __rtn = __channel.Send(__compiler.Compile(__combinator.Combination(__info)));
    
                    BaseInfomation_O __outInfo = new Resolver<BaseInfomation_O>().Resolve(__rtn);
    
                    if (__outInfo.Error == null)
                    {
                        
                        if (__outInfo.result == null)
                        {
                            return default(I.MES.Models.SYS_Company);
                        }
                        return (I.MES.Models.SYS_Company)(new Resolver(typeof(I.MES.Models.SYS_Company)).Resolve(__outInfo.result)); 
                    }
                    else
                    {
                        throw new MESException(__outInfo.ErrorCode, new Exception(__outInfo.Error));
                    }
                }
            }
            public void Update( I.MES.Models.SYS_Company company)
            {
                using (IChannel __channel = ChannelFactory.GetChannel())
                {
                    __channel.Open();
    
                    Compiler __compiler = new Compiler();
                    List<Parameters> __ps = new List<Parameters>();
                    
                    __ps.Add(new Parameters(){Name = "company", Value = __compiler.Compile(company),TypeName = "I.MES.Library.EF.SYS_Company, I.MES.ServerEF, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null",IsRef=false });
                    BaseInformation_I __info = new BaseInformation_I()
                    {
                        ClassName = this.Name,
                        FunctionName = "Update",
                        Parameters = __ps
                    };
    
                    ICombinator __combinator = new I.MES.GlobalCore.Combinator.CSCombinator();
    
                    var __rtn = __channel.Send(__compiler.Compile(__combinator.Combination(__info)));
    
                    BaseInfomation_O __outInfo = new Resolver<BaseInfomation_O>().Resolve(__rtn);
    
                    if (__outInfo.Error == null)
                    {
                        
                        //if (__outInfo.result == null)
                        //{
                        //    return default(void);
                        //}
                        //return (void)(new Resolver(typeof(void)).Resolve(__outInfo.result)); 
                    }
                    else
                    {
                        throw new MESException(__outInfo.ErrorCode, new Exception(__outInfo.Error));
                    }
                }
            }
        }
}
